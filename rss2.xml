<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>方寸之间</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>天地有大美而不言，四时有明法而不议，万物有成理而不说。</description>
    <pubDate>Sun, 18 Nov 2018 04:08:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>tomcat on mac </title>
      <link>http://yoursite.com/2017/06/26/tomcat-on-mac/</link>
      <guid>http://yoursite.com/2017/06/26/tomcat-on-mac/</guid>
      <pubDate>Mon, 26 Jun 2017 12:34:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;#Mac 下安装配置Tomcat&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;去&lt;a href=&quot;http://tomcat.apache.org/download-70.cgi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Tomcat&lt;/a&gt;上下载一个Tomcat。&lt;br&gt;我下载的是7.0.78版本&lt;/p&gt;
&lt;img src=&quot;/2017/06/26/tomcat-on-mac/tomcat20170622.png&quot; alt=&quot;This is an image&quot; title=&quot;This is an image&quot;&gt;
&lt;p&gt;下载完，放到根目录下；/Library/Tomcat&lt;/p&gt;
&lt;p&gt;设置运行脚本权限&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo chmod 755  /Library/Tomcat/bin/*.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/startup.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功的话会出现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ tomcat start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CATALINA_BASE:   /Library/Tomcat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CATALINA_HOME:   /Library/Tomcat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CATALINA_TMPDIR: /Library/Tomcat/temp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CLASSPATH:       /Library/Tomcat/bin/bootstrap.jar:/Library/Tomcat7078/bin/tomcat-juli.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Tomcat started.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>#Mac 下安装配置Tomcat</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>去<a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="external">Apache Tomcat</a>上下载一个Tomcat。<br>我下载的是7.0.78版本</p><img src="/2017/06/26/tomcat-on-mac/tomcat20170622.png" alt="This is an image" title="This is an image"><p>下载完，放到根目录下；/Library/Tomcat</p><p>设置运行脚本权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 755  /Library/Tomcat/bin/*.sh</div></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh /Library/Tomcat/bin/startup.sh</div></pre></td></tr></table></figure><p>成功的话会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  ~ tomcat start</div><div class="line">Using CATALINA_BASE:   /Library/Tomcat</div><div class="line">Using CATALINA_HOME:   /Library/Tomcat</div><div class="line">Using CATALINA_TMPDIR: /Library/Tomcat/temp</div><div class="line">Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</div><div class="line">Using CLASSPATH:       /Library/Tomcat/bin/bootstrap.jar:/Library/Tomcat7078/bin/tomcat-juli.jar</div><div class="line">Tomcat started.</div></pre></td></tr></table></figure><a id="more"></a><p>打开浏览器输入：localhost8080 ,就可以看见tom猫这个页面<br><img src="/tomcat201706221.png" alt="tomcat home page"></p><h2 id="配置快捷命令"><a href="#配置快捷命令" class="headerlink" title="配置快捷命令"></a>配置快捷命令</h2><p>这样每次启动太麻烦了，没次都要跑到library去启动tomcat的shel脚本</p><p>在终端的包含路径下（如/usr/local/bin），下新建一个tomcat的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜ /usrlocal/bin &gt;sudo touch tomcat</div></pre></td></tr></table></figure><p>打开这个文件，配置shell脚本,然后保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">case $1 in</div><div class="line">start)</div><div class="line">sh /Library/Tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">stop)</div><div class="line">sh /Library/Tomcat/bin/shutdown.sh</div><div class="line">;;</div><div class="line">restart)</div><div class="line">sh /Library/Tomcat/bin/shutdown.sh</div><div class="line">sh /Library/Tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">*)</div><div class="line">echo “Usage: start|stop|restart”</div><div class="line">;;</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure><p>快捷命令如下：</p><ol><li>tomcat start</li><li>tomcat stop</li><li>tomcat restart</li></ol><h2 id="管理Mac-OS自带的Apache"><a href="#管理Mac-OS自带的Apache" class="headerlink" title="管理Mac OS自带的Apache"></a>管理Mac OS自带的Apache</h2><p>###Mac OS X 内置了Apache 和 PHP</p><blockquote><p>管理方法一：</p></blockquote><p>打开“系统设置偏好（System Preferences）” -&gt; “共享（Sharing）” -&gt; “Web共享（Web Sharing）”</p><blockquote><p>管理方法二：</p></blockquote><ol><li>启动Apache：运行“sudo apachectl start”，再输入root帐号密码</li><li>停止Apache：运行“sudo apachectl stop”，</li><li>查看Apache：版本：运行“sudo apachectl －v”，</li><li>重启Apache：运行“sudo apachectl restart”</li></ol><h3 id="Mac-OS中Apache文件默认存放位置"><a href="#Mac-OS中Apache文件默认存放位置" class="headerlink" title="Mac OS中Apache文件默认存放位置"></a>Mac OS中Apache文件默认存放位置</h3><p>Mac OS 的Apache2的配置文件（httpd.config）保存在/etc/apache2</p><p>Mac OS 的Apache2的程序文件（httpd, ab） 保存在/usr/sbin/</p><p>Mac OS 的Apache2的默认根目录：/Library/WebServer/Documents</p><p>修改Apache2的配置文件，在终端运行“sudo vi /etc/apache2/httpd.conf”，打开Apche的配置文件进行修改。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/06/26/tomcat-on-mac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>创建一个可维护的Android Client</title>
      <link>http://yoursite.com/2017/05/11/retrofit-creating-a-sustainable-android-client/</link>
      <guid>http://yoursite.com/2017/05/11/retrofit-creating-a-sustainable-android-client/</guid>
      <pubDate>Thu, 11 May 2017 02:54:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;原文&lt;a href=&quot;https://futurestud.io/tutorials/retrofit-2-creating-a-sustainable-android-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://futurestud.io/tutorials/retrofit-2-creating-a-sustainable-android-client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Retrofit 提供了广泛的功能，有很多可能的配置。很多大型应用程序需要一些特定的设置，例如OAuth认证。为了实现简洁和稳定的项目，我们向您介绍我们的想法：一个可维护的&lt;code&gt;ServiceGenerator&lt;/code&gt; Android客户端。&lt;/p&gt;
&lt;h2 id=&quot;ServiceGenerator&quot;&gt;&lt;a href=&quot;#ServiceGenerator&quot; class=&quot;headerlink&quot; title=&quot;ServiceGenerator&quot;&gt;&lt;/a&gt;ServiceGenerator&lt;/h2&gt;&lt;p&gt;正如您知道{% post_link retrofit-getting-started 开始教程 %}，Retrofit 对象和它的builder是所有请求的核心。在这里您配置您的请求、响应、身份验证、日志记录和错误处理。不幸的是，我们已经看到太多的开发人员只是复制和粘贴这些部分，而不是分离成一个简洁的类。    &lt;code&gt;ServiceGenerator&lt;/code&gt;将会给我们一个解决方案，这源于&lt;a href=&quot;https://github.com/bkiers/retrofit-oauth/tree/master/src/main/java/nl/bigo/retrofitoauth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bart Kiers的想法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们从简单的代码开始。在当前状态下，它只定义了一个方法来创建一个给定的class/interface REST客户端，从接口返回一个service类。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>原文<a href="https://futurestud.io/tutorials/retrofit-2-creating-a-sustainable-android-client" target="_blank" rel="external">https://futurestud.io/tutorials/retrofit-2-creating-a-sustainable-android-client</a></p><p>Retrofit 提供了广泛的功能，有很多可能的配置。很多大型应用程序需要一些特定的设置，例如OAuth认证。为了实现简洁和稳定的项目，我们向您介绍我们的想法：一个可维护的<code>ServiceGenerator</code> Android客户端。</p><h2 id="ServiceGenerator"><a href="#ServiceGenerator" class="headerlink" title="ServiceGenerator"></a>ServiceGenerator</h2><p>正如您知道{% post_link retrofit-getting-started 开始教程 %}，Retrofit 对象和它的builder是所有请求的核心。在这里您配置您的请求、响应、身份验证、日志记录和错误处理。不幸的是，我们已经看到太多的开发人员只是复制和粘贴这些部分，而不是分离成一个简洁的类。    <code>ServiceGenerator</code>将会给我们一个解决方案，这源于<a href="https://github.com/bkiers/retrofit-oauth/tree/master/src/main/java/nl/bigo/retrofitoauth" target="_blank" rel="external">Bart Kiers的想法</a>。</p><p>让我们从简单的代码开始。在当前状态下，它只定义了一个方法来创建一个给定的class/interface REST客户端，从接口返回一个service类。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.github.com/"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.Builder builder =</div><div class="line">            <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                    .baseUrl(BASE_URL)</div><div class="line">                    .addConverterFactory(GsonConverterFactory.create());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit = builder.build();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.Builder httpClient =</div><div class="line">            <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">S <span class="title">createService</span><span class="params">(</span></span></div><div class="line">        Class&lt;S&gt; serviceClass) &#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(serviceClass);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ServiceGenerator</code>类使用Retorfit的Builder与给定的API库的URL（BASE_URL）创建一个新的REST客户端。例如，GitHub的API库的URL是<code>https://api.github.com/</code>。</p><p><code>createService</code>方法需要一个<code>serviceClass</code>作为参数创建并它的Class对象。获取到对象后，就可以执行网络请求了。</p><h2 id="为什么ServiceGenerator里的东西都是静态的？"><a href="#为什么ServiceGenerator里的东西都是静态的？" class="headerlink" title="为什么ServiceGenerator里的东西都是静态的？"></a>为什么ServiceGenerator里的东西都是静态的？</h2><p>您可能会奇怪为什么我们使用静态字段和方法在ServiceGenerator类里面。实际上，它有一个简单的原因：在整个应用程序中我们要使用相同的对象（例如：<code>OkHttpClient</code>，<code>Retrofit</code>，…），打开一个socket连接处理所有的请求和响应，包括缓存和更多功能（通常大家都这么做）。</p><p>此外，为了加快速度，我们可以在移动设备上节省一点点宝贵的内存，而不必一次又一次重复创建相同的对象。所以我们需要标记所有字段和方法是静态的</p><h2 id="使用-ServiceGenerator"><a href="#使用-ServiceGenerator" class="headerlink" title="使用 ServiceGenerator"></a>使用 ServiceGenerator</h2><p>还记得{% post_link retrofit-getting-started 开始教程 %}我们代码是怎样的吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String API_BASE_URL = <span class="string">"https://api.github.com/"</span>;</div><div class="line"></div><div class="line">OkHttpClient.Builder httpClient = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line"></div><div class="line">Retrofit.Builder builder =  </div><div class="line">    <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .baseUrl(API_BASE_URL)</div><div class="line">            .addConverterFactory(</div><div class="line">                GsonConverterFactory.create()</div><div class="line">            );</div><div class="line"></div><div class="line">Retrofit retrofit =  </div><div class="line">    builder</div><div class="line">        .client(</div><div class="line">            httpClient.build()</div><div class="line">        )</div><div class="line">        .build();</div><div class="line"></div><div class="line">GitHubClient client = retrofit.create(GitHubClient.class);</div></pre></td></tr></table></figure><p>对于一个请求，这看起来很好。只是，如果您的应用程序中有几十个网络请求，这管理起来将是一个噩梦。我们的<code>ServiceGenerator</code>，只需要一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHubClient client = ServiceGenerator.createService(GitHubClient.class);</div></pre></td></tr></table></figure><p>所有的准备工作都移到我们的<code>ServiceGenerator</code>。</p><p>不幸的是，在大多数情况下，ServiceGenerator不能一直这样简单。因此，上面的代码只是给您一个起点。您需要适应您的需求，就像我们在其他教程里做的一样。然后，在接下来的两个章节中我们将探讨一些可能的变化。</p><h2 id="准备-Logging-日志"><a href="#准备-Logging-日志" class="headerlink" title="准备 Logging 日志"></a>准备 Logging 日志</h2><p>开发者最常见的愿望之一是想知道Retrofit实际上发送和接收的数据是什么样的。我们有一个完整的教程专用于<a href="https://futurestud.io/tutorials/retrofit-2-log-requests-and-responses" target="_blank" rel="external">Retrofit与logging</a>，在这里您可以知道得更多。</p><p>Retorift的logging日志通过回调一个<code>HttpLoggingInterceptor</code>拦截器。您需要添加这个拦截器实例到<code>OkHttpClient</code>。如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.github.com/"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.Builder builder =</div><div class="line">            <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                    .baseUrl(BASE_URL)</div><div class="line">                    .addConverterFactory(GsonConverterFactory.create());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit = builder.build();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpLoggingInterceptor logging =</div><div class="line">            <span class="keyword">new</span> HttpLoggingInterceptor()</div><div class="line">                    .setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.Builder httpClient =</div><div class="line">            <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">S <span class="title">createService</span><span class="params">(</span></span></div><div class="line">        Class&lt;S&gt; serviceClass) &#123;</div><div class="line">        <span class="keyword">if</span> (!httpClient.interceptors().contains(logging)) &#123;</div><div class="line">            httpClient.addInterceptor(logging);</div><div class="line">            builder.client(httpClient.build());</div><div class="line">            retrofit = builder.build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> retrofit.create(serviceClass);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有几件事您必须意识到。首先，确保不要多次加入拦截器！如果日志拦截器已经存在，我们用<code>httpClient.interceptors().contains(logging)</code>检查。其次，确保不要每一次调用<code>createSercice</code>的时候都去build <code>retrofit</code> 对象。否则的话<code>ServiceGenerator</code>就失去他的作用了。</p><h2 id="准备认证"><a href="#准备认证" class="headerlink" title="准备认证"></a>准备认证</h2><p>认证的要求有点不同。您可以在我们的教程<a href="https://futurestud.io/tutorials/android-basic-authentication-with-retrofit" target="_blank" rel="external">基本身份验证</a>，<a href="https://futurestud.io/tutorials/retrofit-token-authentication-on-android" target="_blank" rel="external">Token 认证</a>，<a href="https://futurestud.io/tutorials/oauth-2-on-android-with-retrofit" target="_blank" rel="external">OAuth</a>，甚至<a href="https://futurestud.io/tutorials/retrofit-2-hawk-authentication-on-android" target="_blank" rel="external">Hawk 认证</a>中去学习更多的认证。对于每一个认证的实现细节是有点不同的，您可能会改变<code>ServiceGenerator</code>。其中一个变化是，您需要通过额外的参数来<code>createService</code>创建一个客户端。</p><p>让我们看一个 Hawk 认证的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.github.com/"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.Builder builder =</div><div class="line">            <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                    .baseUrl(BASE_URL)</div><div class="line">                    .addConverterFactory(GsonConverterFactory.create());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit = builder.build();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpLoggingInterceptor logging =</div><div class="line">            <span class="keyword">new</span> HttpLoggingInterceptor()</div><div class="line">                    .setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.Builder httpClient =</div><div class="line">            <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">S <span class="title">createService</span><span class="params">(</span></span></div><div class="line">            Class&lt;S&gt; serviceClass, <span class="keyword">final</span> HawkCredentials credentials) &#123;</div><div class="line">        <span class="keyword">if</span> (credentials != <span class="keyword">null</span>) &#123;</div><div class="line">            HawkAuthenticationInterceptor interceptor =</div><div class="line">                    <span class="keyword">new</span> HawkAuthenticationInterceptor(credentials);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!httpClient.interceptors().contains(interceptor)) &#123;</div><div class="line">                httpClient.addInterceptor(interceptor);</div><div class="line"></div><div class="line">                builder.client(httpClient.build());</div><div class="line">                retrofit = builder.build();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> retrofit.create(serviceClass);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们的<code>createService</code>现在有两个参数(<code>HawkCredentials</code>)。如果传递一个非空值，它将创建必要的Hawk身份验证拦截器并将其添加到Retrofit客户端。我们还需要rebuild Retrofit，以应用我们的变化到下一个请求。</p><p>一抬头，您可能会在其他教程中看到<code>ServiceGenerator</code>不同版本。不要混淆！我们也建议您保持您的<code>ServiceGenerator</code>简洁和专门的使用情况！</p><h2 id="接下来是什么"><a href="#接下来是什么" class="headerlink" title="接下来是什么"></a>接下来是什么</h2><p>在本教程中，您已经了解到为什么推荐集中生成您的Retrofit客户端。您见过一个方法您可以用<code>ServiceGenerator</code>类实现它。不过，您可能不得不调整您的目的。</p><p>如果您有反馈或问题，请在评论中让我们知道或<a href="https://futurestud.io/tutorials/twitter.com/futurestud_io" target="_blank" rel="external">@ futurestud_io</a>。</p><p>Make it rock &amp; enjoy coding!</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/05/11/retrofit-creating-a-sustainable-android-client/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ruby on Rails 笔记</title>
      <link>http://yoursite.com/2017/05/11/ruby-on-rails-note/</link>
      <guid>http://yoursite.com/2017/05/11/ruby-on-rails-note/</guid>
      <pubDate>Thu, 11 May 2017 01:56:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;学习rails时记下的笔记&lt;/p&gt;
&lt;h2 id=&quot;Rails-环境&quot;&gt;&lt;a href=&quot;#Rails-环境&quot; class=&quot;headerlink&quot; title=&quot;Rails 环境&quot;&gt;&lt;/a&gt;Rails 环境&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rails console					# Loading development environment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails console test				# Loading test environment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails console production			# Loading production environment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails console --sandbox				# sandbox&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails server --environment production		# server production&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;controller-plural&quot;&gt;&lt;a href=&quot;#controller-plural&quot; class=&quot;headerlink&quot; title=&quot;controller [plural]&quot;&gt;&lt;/a&gt;controller [plural]&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rails generate controller Sessions home help		# generate 命令可以接收一个可选的参数列表,创建首页、帮助页面&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails generate controller PasswordResets new edit --no-test-framework&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails destroy  controller StaticPages 			# 撤销staticpages controller&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rails destroy  controller StaticPages home help&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>学习rails时记下的笔记</p><h2 id="Rails-环境"><a href="#Rails-环境" class="headerlink" title="Rails 环境"></a>Rails 环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rails console# Loading development environment</div><div class="line">rails console test# Loading test environment</div><div class="line">rails console production# Loading production environment</div><div class="line">rails console --sandbox# sandbox</div><div class="line"></div><div class="line">rails server --environment production# server production</div></pre></td></tr></table></figure><h2 id="controller-plural"><a href="#controller-plural" class="headerlink" title="controller [plural]"></a>controller [plural]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rails generate controller Sessions home help# generate 命令可以接收一个可选的参数列表,创建首页、帮助页面</div><div class="line">rails generate controller PasswordResets new edit --no-test-framework</div><div class="line"></div><div class="line">rails destroy  controller StaticPages # 撤销staticpages controller</div><div class="line">rails destroy  controller StaticPages home help</div></pre></td></tr></table></figure><a id="more"></a><h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rails generate model User name:string email:string</div><div class="line">rails destroy model User</div></pre></td></tr></table></figure><h2 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rails generate migration add_index_to_users_email# generate migration index</div><div class="line">rails generate migration add_admin_to_users admin:boolean# add filed</div><div class="line">rails generate migration add_password_digest_to_users password_digest:string</div><div class="line">rails generate migration add_reset_to_users reset_digest:string reset_sent_at:datetime</div></pre></td></tr></table></figure><h3 id="执行-migrate"><a href="#执行-migrate" class="headerlink" title="执行 migrate"></a>执行 migrate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rails db:migrate</div><div class="line">rails db:rollback</div><div class="line">rails db:migrate VERSION=0</div><div class="line">rails db:migrate:reset#reset db</div></pre></td></tr></table></figure><h2 id="integration-test模版"><a href="#integration-test模版" class="headerlink" title="integration_test模版"></a>integration_test模版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rails generate integration_test site_layout</div><div class="line">rails generate integration_test users_signup</div></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试驱动开发使用“遇红-变绿-重构”循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rails test</div><div class="line">rails test:integration# 只执行集成测试</div><div class="line">rails test:models# 执行model测试【待验证】</div><div class="line">rails test test/integration/users_login_test.rb# 执行单个文件测试</div></pre></td></tr></table></figure><h2 id="mailer"><a href="#mailer" class="headerlink" title="mailer"></a>mailer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails generate mailer UserMailer account_activation password_reset</div></pre></td></tr></table></figure><h2 id="uploader"><a href="#uploader" class="headerlink" title="uploader"></a>uploader</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails generate uploader Picture</div></pre></td></tr></table></figure><h2 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h2><h2 id="link-to"><a href="#link-to" class="headerlink" title="link_to"></a>link_to</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%= link_to &quot;(forgot password)&quot;, new_password_reset_path %&gt;</div><div class="line">&lt;%= link_to &quot;Reset password&quot;, edit_password_reset_url(@user.reset_token, email: @user.email) %&gt;</div></pre></td></tr></table></figure><h2 id="update-attribute"><a href="#update-attribute" class="headerlink" title="update_attribute"></a>update_attribute</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update_attribute(:name, &quot;El Duderino&quot;)</div><div class="line">update_columns(activated: true, activated_at: Time.zone.now)</div></pre></td></tr></table></figure><h2 id="assert"><a href="#assert" class="headerlink" title="assert_*"></a>assert_*</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">assert_select &quot;div&quot;&lt;div&gt;foobar&lt;/div&gt;</div><div class="line">assert_select &quot;div&quot;, &quot;foobar&quot;&lt;div&gt;foobar&lt;/div&gt;</div><div class="line">assert_select &quot;div.nav&quot;&lt;div class=&quot;nav&quot;&gt;foobar&lt;/div&gt;</div><div class="line">assert_select &quot;div#profile&quot;&lt;div id=&quot;profile&quot;&gt;foobar&lt;/div&gt;</div><div class="line">assert_select &quot;div[name=yo]&quot;&lt;div name=&quot;yo&quot;&gt;hey&lt;/div&gt;</div><div class="line">assert_select &quot;a[href=?]&quot;, &apos;/&apos;, count: 1&lt;a href=&quot;/&quot;&gt;foo&lt;/a&gt;</div><div class="line">assert_select &quot;a[href=?]&quot;, &apos;/&apos;, text: &quot;foo&quot;&lt;a href=&quot;/&quot;&gt;foo&lt;/a&gt;</div><div class="line">assert_select &quot;input[name=email][type=hidden][value=?]&quot;, user.email</div><div class="line">&lt;input id=&quot;email&quot; name=&quot;email&quot; type=&quot;hidden&quot; value=&quot;michael@example.com&quot; /&gt;</div><div class="line"></div><div class="line">assert_template &apos;static_pages/home&apos;</div><div class="line">assert_response :success</div><div class="line">assert_equal full_title, &quot;Ruby on Rails&quot;# 判断两个值相等，full_title是一个方法</div></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app/assets/stylesheets/application.css</div><div class="line">*= require_tree .</div><div class="line">会把 app/assets/stylesheets 目录中的所有 CSS 文件（包含子目录中的文件）都引入应用的 CSS 文件。</div><div class="line">*= require_self</div><div class="line">会把 application.css 这个文件中的 CSS 也加载进来。</div></pre></td></tr></table></figure><p>下载一个图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o app/assets/images/rails.png -OL railstutorial-china.org/assets/images/rails.png</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/05/11/ruby-on-rails-note/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Retrofit系列文章</title>
      <link>http://yoursite.com/2017/05/06/retrofit-series-overview/</link>
      <guid>http://yoursite.com/2017/05/06/retrofit-series-overview/</guid>
      <pubDate>Sat, 06 May 2017 07:08:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Retrofit&quot;&gt;&lt;a href=&quot;#Retrofit&quot; class=&quot;headerlink&quot; title=&quot;Retrofit&quot;&gt;&lt;/a&gt;Retrofit&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/06/retrofit-getting-started/&quot; title=&quot;开始教程&quot;&gt;开始教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/06/retrofit-basics-of-api-description/&quot; title=&quot;基本操作&quot;&gt;基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/11/retrofit-creating-a-sustainable-android-client/&quot; title=&quot;创建一个可维护的Android Client&quot;&gt;创建一个可维护的Android Client&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><ul><li><a href="/2017/05/06/retrofit-getting-started/" title="开始教程">开始教程</a></li><li><a href="/2017/05/06/retrofit-basics-of-api-description/" title="基本操作">基本操作</a></li><li><a href="/2017/05/11/retrofit-creating-a-sustainable-android-client/" title="创建一个可维护的Android Client">创建一个可维护的Android Client</a></li></ul><a id="more"></a><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><h2 id="Responses"><a href="#Responses" class="headerlink" title="Responses"></a>Responses</h2><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><h2 id="File-Upload-Download"><a href="#File-Upload-Download" class="headerlink" title="File Upload $ Download"></a>File Upload $ Download</h2><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><h2 id="Error-Handing"><a href="#Error-Handing" class="headerlink" title="Error Handing"></a>Error Handing</h2><h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><h2 id="Converters"><a href="#Converters" class="headerlink" title="Converters"></a>Converters</h2><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><h2 id="Testing-amp-Mocking"><a href="#Testing-amp-Mocking" class="headerlink" title="Testing &amp; Mocking"></a>Testing &amp; Mocking</h2><h2 id="Java-Basics-for-Retrofit"><a href="#Java-Basics-for-Retrofit" class="headerlink" title="Java Basics for Retrofit"></a>Java Basics for Retrofit</h2>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/05/06/retrofit-series-overview/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Retrofit基本操作</title>
      <link>http://yoursite.com/2017/05/06/retrofit-basics-of-api-description/</link>
      <guid>http://yoursite.com/2017/05/06/retrofit-basics-of-api-description/</guid>
      <pubDate>Sat, 06 May 2017 06:18:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;如何描述API接口&quot;&gt;&lt;a href=&quot;#如何描述API接口&quot; class=&quot;headerlink&quot; title=&quot;如何描述API接口&quot;&gt;&lt;/a&gt;如何描述API接口&lt;/h2&gt;&lt;p&gt;正如您已经知道在&lt;a href=&quot;/2017/05/06/retrofit-getting-started/&quot; title=&quot;开始教程&quot;&gt;开始教程&lt;/a&gt;中我们描述了所有的Retrofit请求，在我们的第一个例子里，我们定义了一个接口类展示了一个功能，如下所示：&lt;br&gt;您&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GitHubClient&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/users/&amp;#123;user&amp;#125;/repos&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Call&amp;lt;List&amp;lt;GitHubRepo&amp;gt;&amp;gt; reposForUser(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;) String user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在让我们来看看这些选项里面更详细的信息。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="如何描述API接口"><a href="#如何描述API接口" class="headerlink" title="如何描述API接口"></a>如何描述API接口</h2><p>正如您已经知道在<a href="/2017/05/06/retrofit-getting-started/" title="开始教程">开始教程</a>中我们描述了所有的Retrofit请求，在我们的第一个例子里，我们定义了一个接口类展示了一个功能，如下所示：<br>您<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubClient</span> </span>&#123;  </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line">    Call&lt;List&lt;GitHubRepo&gt;&gt; reposForUser(</div><div class="line">        <span class="meta">@Path</span>(<span class="string">"user"</span>) String user</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在让我们来看看这些选项里面更详细的信息。</p><a id="more"></a><h1 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h1><p>我们在Java interface里的方法上使用注解来描述单个的API最终请求的处理。</p><p>您要做的第一件事就是定义HTTP的请求方法，比如<code>GET</code>，<code>POST</code>， <code>PUT</code>， <code>DELETE</code>等等。Retrofit对于每一个标准的请求方法都提供了一个注解：<code>@GET</code>， <code>@POST</code>， <code>@PUT</code>， <code>@DELETE</code>， <code>@PATCH</code> or <code>@HEAD</code>。您只需要在每个HTTP方法上使用合适的Retrofit注解就行。</p><p>您必须在您的app里面指定请求方法。如果您从来没有听说过HTTP请求方法，请在    <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods" target="_blank" rel="external">维基百科的HTTP页面</a>上了解它。</p><p>下面是几个简单的示例：<code>@GET</code>， <code>@PUT</code> and <code>@DELETE</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FutureStudioClient</span> </span>&#123;  </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/user/info"</span>)</div><div class="line">    <span class="function">Call&lt;UserInfo&gt; <span class="title">getUserInfo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@PUT</span>(<span class="string">"/user/info"</span>)</div><div class="line">    <span class="function">Call&lt;UserInfo&gt; <span class="title">updateUserInfo</span><span class="params">(</span></span></div><div class="line">        @Body UserInfo userInfo</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="meta">@DELETE</span>(<span class="string">"/user"</span>)</div><div class="line">    <span class="function">Call&lt;Void&gt; <span class="title">deleteUser</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="HTTP资源路径"><a href="#HTTP资源路径" class="headerlink" title="HTTP资源路径"></a>HTTP资源路径</h1><p>此外，还需要将URL的相对路径添加到注解的字符串参数中，例如<code>@GET(&quot;/user/info&quot;)</code>。</p><p>在大多数情况下，您会通过一个相对的URL，而不是一个完整的URL（像<code>http://futurestud.io/api/user/info</code>)。这样做的好处是Retrofit只需要定义一次的基础URL（<code>http://futurestud.io</code>），当您想改变基础URL的时候，您只需要改动一个地方。此外，它还使一些更高级的事情变得更容易，例如：动态基础网址。当然您也可以指定一个完整的URL。如果您想了解更多关于URL的处理，以及如何将这些基础URL和相对URL放在一起，请随时阅读我们的指南<a href="https://futurestud.io/tutorials/retrofit-2-url-handling-resolution-and-parsing" target="_blank" rel="external">URL handling，resolution and parsing</a>。</p><p>再次，一些简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FutureStudioClient</span> </span>&#123;  </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/user/info"</span>)</div><div class="line">    <span class="function">Call&lt;UserInfo&gt; <span class="title">getUserInfo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@PUT</span>(<span class="string">"/user/info"</span>)</div><div class="line">    <span class="function">Call&lt;UserInfo&gt; <span class="title">updateUserInfo</span><span class="params">(</span></span></div><div class="line">        @Body UserInfo userInfo</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="meta">@DELETE</span>(<span class="string">"/user"</span>)</div><div class="line">    <span class="function">Call&lt;Void&gt; <span class="title">deleteUser</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// example for passing a full URL</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"https://futurestud.io/tutorials/rss/"</span>)</div><div class="line">    <span class="function">Call&lt;FutureStudioRssFeed&gt; <span class="title">getRssFeed</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="方法名和返回类型"><a href="#方法名和返回类型" class="headerlink" title="方法名和返回类型"></a>方法名和返回类型</h1><p>您现在已经知道了如何使用HTTP请求方法的注解。然而，我们还没有谈到实际的java方法声明：<code>Call&lt;UserInfo&gt; getUserInfo();</code>。</p><p>它包含三个部分：</p><ol><li>方法名</li><li>方法返回类型</li><li>方法参数</li></ol><p>让我们从最简单的方法名称开始。您可以自由定义方法名。Retrofit不关心，它不会对功能有任何的影响。不过，您应该选择一个名称帮助于您和其他开发人员了解这是什么API请求。</p><p>返回类型：您必须定义您期望从服务器获得的数据类型。例如，当您请求的用户的一些信息，您可以指定它叫<code>Call&lt;UserInfo&gt;</code>。<code>UserInfo</code>类包含的属性将保存用户数据。Retrofit 会自动映射，您不必做任何手动解析。如果您想要源响应对象(Raw Response)，您可以使用<code>ResponseBody</code>代替一个特定的类。如果您根本不关心服务器响应，您可以使用<code>Void</code>。在所有这些情况下，您必须将其封装成Retrofit类型:<code>Call&lt;&gt;</code> class。</p><p>最后，将参数传递给方法有多种方式，我们会给您一些选项的链接：</p><ul><li>@Body: <a href="https://futurestud.io/tutorials/retrofit-send-objects-in-request-body" target="_blank" rel="external">发送一个Java对象作为请求体</a>。</li><li>@Url: <a href="https://futurestud.io/tutorials/retrofit-2-how-to-use-dynamic-urls-for-requests" target="_blank" rel="external">使用动态URL</a>。</li><li>@Field: <a href="https://futurestud.io/tutorials/retrofit-send-data-form-urlencoded" target="_blank" rel="external">发送 form-urlencoded 字段数据</a>。</li></ul><p>一些示范操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FutureStudioClient</span> </span>&#123;  </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/user/info"</span>)</div><div class="line">    <span class="function">Call&lt;UserInfo&gt; <span class="title">getUserInfo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@PUT</span>(<span class="string">"/user/info"</span>)</div><div class="line">    <span class="function">Call&lt;Void&gt; <span class="title">updateUserInfo</span><span class="params">(</span></span></div><div class="line">        @Body UserInfo userInfo</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getUserProfilePhoto</span><span class="params">(</span></span></div><div class="line">        @Url String profilePhotoUrl</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于路径和查询参数非常常见，我们将在接下来的两个章节中更详细地讨论它们。</p><h2 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h2><p>REST API是在动态URL上生成的。通过替换的URL去访问资源，例如让我们的第三个教程页面‘<a href="http://futurestud.io/api/tutorials/3’。结尾的3指定您想要访问哪一个教程。Retrofit提供了一个简单的办法来取代这些所谓的路径参数。例如在入门教程中看到的一个例子：" target="_blank" rel="external">http://futurestud.io/api/tutorials/3’。结尾的3指定您想要访问哪一个教程。Retrofit提供了一个简单的办法来取代这些所谓的路径参数。例如在入门教程中看到的一个例子：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubClient</span> </span>&#123;  </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line">    Call&lt;List&lt;GitHubRepo&gt;&gt; reposForUser(</div><div class="line">        <span class="meta">@Path</span>(<span class="string">"user"</span>) String user</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这里，<code>{user}</code>是一个占位符，表示它的值是动态的，将在请求生成的时候创建。如果您的URL中包含路径参数，您需要在方法参数中添加一个<code>@Path()</code>参数，<code>@Path</code>的值匹配URL中的占位符（在这个例子中，它是<code>@Path(&quot;user&quot;)</code>）。您可以使用多个占位符，如果必要的话。只要确保您有足够的匹配参数。您甚至可以使用<a href="https://futurestud.io/tutorials/retrofit-optional-path-parameters" target="_blank" rel="external">可选的路径参数</a>。</p><h2 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h2><p>动态URL的另一大部分是查询参数。如果您使用我们的过滤器，您可以在我们的网站上看到它：<code>https://futurestud.io/tutorials?filter=video</code>。<code>?filter=video</code>是一个查询参数，它进一步描述了请求资源。与路径参数不同，您不需要将它们添加到注解url。您可以简单地添加一个<code>@Query()</code>和查询参数名称的方法参数。Retrofit将自动附加到请求上。如果将空值传递为查询参数，则将忽略它。您还可以添加<a href="https://futurestud.io/tutorials/retrofit-2-add-multiple-query-parameter-with-querymap" target="_blank" rel="external">多个查询参数</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FutureStudioClient</span> </span>&#123;  </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/tutorials"</span>)</div><div class="line">    Call&lt;List&lt;Tutorial&gt;&gt; getTutorials(</div><div class="line">        <span class="meta">@Query</span>(<span class="string">"page"</span>) Integer page</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/tutorials"</span>)</div><div class="line">    Call&lt;List&lt;Tutorial&gt;&gt; getTutorials(</div><div class="line">            <span class="meta">@Query</span>(<span class="string">"page"</span>) Integer page,</div><div class="line">            <span class="meta">@Query</span>(<span class="string">"order"</span>) String order,</div><div class="line">            <span class="meta">@Query</span>(<span class="string">"author"</span>) String author,</div><div class="line">            <span class="meta">@Query</span>(<span class="string">"published_at"</span>) Date date</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的例子中，您也可以移除第一个<code>getTutorials()</code>方法，第二个方法使用一个<code>null</code>值传递给最后三个参数。</p><h1 id="下一步是什么"><a href="#下一步是什么" class="headerlink" title="下一步是什么"></a>下一步是什么</h1><p>这只是一篇API端点的介绍。您已经学习了在接口中添加新API的基本知识。您可以调整资源位置、HTTP方法、返回类型、路径和查询参数。</p><p>Retrofit提供了更多的选项，以进一步修改请求。例如，我们还没有谈到headers。还有很多要学习，所以请继续阅读更多教程！</p><p>如果您有反馈或问题，请在评论中让我们知道或在推特上 <a href="https://futurestud.io/tutorials/twitter.com/futurestud_io" target="_blank" rel="external">@futurestud_io</a> 我们。</p><p>让它摇滚并享Coding！</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/05/06/retrofit-basics-of-api-description/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
